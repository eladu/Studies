import datetime
import readline
import logging

# Configure logging
logging.basicConfig(filename='atm.log', level=logging.INFO, format='%(asctime)s - %(message)s')

# Sample customer data stored in a dictionary
customers = {
    "Avi Cohen": {"pin": "1234", "balance": 1000},
    "Yossi Cohen": {"pin": "6543", "balance": 500},
    "Yuri Levi": {"pin": "5852", "balance": 800}
}

# Function to display a bordered message
def print_boxed_message(message):
    border = "=" * (len(message) + 4)
    print(border)
    print(f"| {message} |")
    print(border)
    logging.info(message)

# Function to validate the entered PIN
def validate_pin(user, pin):
    return customers[user]["pin"] == pin

# Function to enable user input history
def setup_input_history():
    readline.set_history_length(10)

# Function to handle deposits
def deposit_money(user):
    setup_input_history()
    try:
        amount = int(input("How much would you like to deposit? "))
        if amount % 20 == 0:
            customers[user]["balance"] += amount
            print_boxed_message("Deposit successful!")
            logging.info(f"{user} deposited {amount} NIS.")
        else:
            print_boxed_message("Invalid amount! Must be a multiple of 20, 50, or 100.")
    except ValueError:
        print_boxed_message("Invalid input! Please enter a valid number.")
        logging.error("Deposit failed due to invalid input.")

# Function to handle withdrawals
def withdraw_money(user):
    setup_input_history()
    options = {"1": 50, "2": 100, "3": 150, "4": 300}
    print_boxed_message("Choose amount: 1 - 50, 2 - 100, 3 - 150, 4 - 300, 5 - Other")
    choice = input("Select an option: ")
    try:
        if choice in options:
            amount = options[choice]
        elif choice == "5":
            attempts = 3
            while attempts > 0:
                amount = int(input("Enter amount (must be a multiple of 20, 50, or 100): "))
                if amount % 20 == 0:
                    break
                attempts -= 1
                print_boxed_message(f"Invalid amount! You have {attempts} attempts left.")
            else:
                print_boxed_message("Too many invalid attempts. Returning to ATM menu.")
                return
        else:
            print_boxed_message("Invalid choice!")
            return
        
        if amount <= customers[user]["balance"]:
            customers[user]["balance"] -= amount
            print_boxed_message("Withdrawal successful!")
            logging.info(f"{user} withdrew {amount} NIS.")
        else:
            print_boxed_message("Transaction failed! Insufficient balance.")
            logging.warning(f"{user} attempted to withdraw {amount} NIS but had insufficient funds.")
    except ValueError:
        print_boxed_message("Invalid input! Please enter a valid number.")
        logging.error("Withdrawal failed due to invalid input.")

# Function to check account balance
def check_balance(user):
    print_boxed_message(f"Your current balance is {customers[user]['balance']} NIS")
    logging.info(f"{user} checked balance: {customers[user]['balance']} NIS.")

# Function to change PIN code
def change_pin(user):
    setup_input_history()
    new_pin = input("Enter new 4-digit PIN: ")
    if len(new_pin) == 4 and new_pin.isdigit():
        customers[user]["pin"] = new_pin
        print_boxed_message("PIN changed successfully!")
        logging.info(f"{user} changed PIN.")
    else:
        print_boxed_message("Invalid PIN format!")
        logging.warning(f"{user} attempted an invalid PIN change.")

# Function to print a receipt with current balance and timestamp
def print_receipt(user):
    now = datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    print_boxed_message(f"Hello {user},\nAt this moment DATE: {now}\nYou have {customers[user]['balance']} NIS in your account.\nThank you for using the ATM!")
    logging.info(f"Receipt printed for {user}.")

# Function to display ATM menu and handle user actions
def atm_menu(user):
    setup_input_history()
    while True:
        print_boxed_message("ATM MENU")
        print("| d - Deposit Money   |")
        print("| w - Withdraw Money  |")
        print("| c - Check Balance   |")
        print("| p - Change PIN      |")
        print("| r - Print Receipt   |")
        print("| q - Quit            |")
        print("=" * 25)
        choice = input("Select an option: ").lower()
        
        if choice == "d":
            deposit_money(user)
        elif choice == "w":
            withdraw_money(user)
        elif choice == "c":
            check_balance(user)
        elif choice == "p":
            change_pin(user)
        elif choice == "r":
            print_receipt(user)
        elif choice == "q":
            print_boxed_message(f"GOODBYE {user}, HAVE A NICE DAY")
            logging.info(f"{user} logged out.")
            break
        else:
            print_boxed_message("Invalid option! Try again.")
            logging.warning(f"{user} entered an invalid option: {choice}.")

# Main function to authenticate user and start the ATM system
def main():
    setup_input_history()
    user = input("Enter your name (First Last): ")
    if user in customers:
        print_boxed_message(f"Welcome, {user}")
        pin = input("Enter your PIN: ")
        if validate_pin(user, pin):
            logging.info(f"{user} logged in.")
            atm_menu(user)
        else:
            print_boxed_message("Invalid PIN! Access denied.")
            logging.warning(f"Failed login attempt for {user}.")
    else:
        print_boxed_message("User not found!")
        logging.warning(f"Unknown user {user} attempted to log in.")

# Program entry point
if __name__ == "__main__":
    main()

# ChatGPT 
# I: Add logs
# ChatGPT said:
# I've added logging to track user actions, errors, and 
# transactions. The logs will be saved in a file named
# atm.log.
# Edited
# Logging has been added to track user actions, errors,
#  and transactions. Logs are stored in atm.log. 
# 